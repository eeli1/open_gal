/*code
pin 1 = a;
pin 2 = b;
pin 23 = c;

c = a & b;
*/

/*opengal
*QP24
*QF5892
*G0
*F0
*L00032 0000000000011111111111111111111
*L00064 1111111111111111111111101110111
*L00096 1111111111111111111111111111111
*L00128 1110000000000000000000000000000
*L05792 0000000000000001100000000000000
*C0000
\x030000
*/

/* Easygal
*QP24
*QF5892
*G0
*F0
*L00032 00000000000011111111111111111111
*L00064 11111111111111111111111101110111
*L00096 11111111111111111111111111111111
*L00128 11110000000000000000000000000000
*L05792 00000000000000001100000000000000
*C0AE7
*/

/* wincupl
*QP24
*QF5892
*G0
*F0
*L00032 00000000000011111111111111111111
*L00064 11111111111111111111111101110111
*L00096 11111111111111111111111111111111
*L00128 11110000000000000000000000000000
*L05792 00000000000000001100000000000000
*L05824 00000011000000110000001000000000
*C0CA7
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*code
pin 1 = i0;
pin 2 = i1;
pin 23 = and;
pin 18 = or;
pin 19 = xor;

table(i0, i1 -> and) {
    00 0
    01 0
    10 0
    11 1
}

table(i0, i1 -> xor ).count {
    0
    1
    1
    0
}

table(i0, i1 -> or).fill(1) {
    00 0
    01 1
    10 1
}

pin 23 = a;
pin 3 = b;
pin 2 = c;

a = (!b | (c));
a.dff;
*/

/*table data
{
  "dff": false,
  "inputPins": [13, 11],
  "outputPin": 17,
  "table": [false, false, false, true]
},
{
  "dff": false,
  "inputPins": [13, 11],
  "outputPin": 19,
  "table": [false, true, true, false]
},
{
  "dff": false,
  "inputPins": [13, 11],
  "outputPin": 18,
  "table": [false, true, true, true]
},
{
  "dff": true,
  "inputPins": [3, 2],
  "outputPin": 23,
  "table": [true, true, false, true]
}
*/

/* Easygal
Created by EasyGal-Translator v1.0
*QP24
*QF5892
*G0
*F0
*L00032 00000000000011111111111111111111
*L00064 11111111111111111111111111111011
*L00096 10111111111111111111111111111111
*L00128 11111111011110111111111111111111
*L00160 11111111111111111111011101111111
*L00192 11111111111111111111111111110000
*L02144 00000000000011111111111111111111
*L02176 11111111111111111111111111111111
*L02208 11111111111111111111111111111111
*L02240 01101111111111111111111111111111
*L02272 11111111111110010000000000000000
*L02880 00000000000000000000000011111111
*L02912 11111111111111111111111111111111
*L02944 11111111111111111111111111111111
*L02976 11111111111101101111111111111111
*L03008 11111111111111111111111110011111
*L03040 11111111111111111111111111111111
*L03072 11110101000000000000000000000000
*L03648 00001111111111111111111111111111
*L03680 11111111111111111111111111111111
*L03712 11111111111111111111111101010000
*L05792 00000000000000001000000011111100
*C4641
*/

/* open gal
*QP24
*QF5892
*G0
*F0
*L00032 0000000000011111111111111111111
*L00064 1111111111111111111111111111011
*L00096 1111111111111111111111111111111
*L00128 1111111011110111111111111111111
*L00160 1111111111111110000000000000000
*L02144 0000000000011111111111111111111
*L02176 1111111111111111111111111111111
*L02208 1111111111111111111111111110111
*L02240 0111111111111111111111111111111
*L02272 1111111101101110000000000000000
*L02880 0000000000000000000000011111111
*L02912 1111111111111111111111111111111
*L02944 1111111111111111111111111111111
*L02976 1111111011110111111111111111111
*L03008 1111111111111111111101101111111
*L03040 1111111111111111111111111111111
*L03072 1110111000000000000000000000000
*L03648 0001111111111111111111111111111
*L03680 1111111111111111111111111111111
*L03712 1111111111111111111011101110000
*L05792 0000000000000001000000011111100
*C0000
*/

/*

*/

use open_gal::*;

#[ignore]
#[test]
fn comlpex() {
    let code = r"                                     
    pin 13 = i0;
    pin 11 = i1;
    pin 17 = and;
    pin 18 = or;
    pin 19 = xor;
    
    table(i0, i1 -> and) {
        00 0
        01 0
        10 0
        11 1
    }
    
    table(i0, i1 -> xor ).count {
        0
        1
        1
        0
    }
    
    table(i0, i1 -> or).fill(1) {
        00 0
        01 1
        10 1
    }
    
    pin 23 = a;
    pin 3 = b;
    pin 2 = c;
    
    a = (!b | (c));
    a.dff;";

    let table_data = parse(code).unwrap();

    let table_data_res = vec![
        TableData {
            input_pins: vec![13, 11],
            output_pin: 17,
            table: vec![false, false, false, true],
            enable_flip_flop: false,
        },
        TableData {
            input_pins: vec![13, 11],
            output_pin: 19,
            table: vec![false, true, true, false],
            enable_flip_flop: false,
        },
        TableData {
            input_pins: vec![13, 11],
            output_pin: 18,
            table: vec![false, true, true, true],
            enable_flip_flop: false,
        },
        TableData {
            input_pins: vec![3, 2],
            output_pin: 23,
            table: vec![true, true, false, true],
            enable_flip_flop: true,
        },
    ];

    assert_eq!(table_data, table_data_res);

    let mut wincupl = Vec::new();
    to_wincupl(&table_data, None)
        .lines()
        .for_each(|x| wincupl.push(x.to_string()));

    let wincupl: Vec<&str> = wincupl.iter().map(|s| &**s).collect();
    let wincupl_res = vec![
        "Pin 13 = in_13p;",
        "Pin 11 = in_11p;",
        "Pin 3 = in_3p;",
        "Pin 2 = in_2p;",
        "Pin 17 = out_17p;",
        "Pin 19 = out_19p;",
        "Pin 18 = out_18p;",
        "Pin 23 = out_23p;",
        "",
        "",
        "Field in_17491982067283519184f = [in_13p, in_11p];",
        "Field out_17491982067283519184f = out_17p;",
        "Table in_17491982067283519184f => out_17491982067283519184f {",
        "  'b'00 => 'b'0;",
        "  'b'01 => 'b'0;",
        "  'b'10 => 'b'0;",
        "  'b'11 => 'b'1;",
        "}",
        "",
        "Field in_6391178064021967062f = [in_13p, in_11p];",
        "Field out_6391178064021967062f = out_19p;",
        "Table in_6391178064021967062f => out_6391178064021967062f {",
        "  'b'00 => 'b'0;",
        "  'b'01 => 'b'1;",
        "  'b'10 => 'b'1;",
        "  'b'11 => 'b'0;",
        "}",
        "",
        "Field in_11084862449502917317f = [in_13p, in_11p];",
        "Field out_11084862449502917317f = out_18p;",
        "Table in_11084862449502917317f => out_11084862449502917317f {",
        "  'b'00 => 'b'0;",
        "  'b'01 => 'b'1;",
        "  'b'10 => 'b'1;",
        "  'b'11 => 'b'1;",
        "}",
        "",
        "Field in_14708453066373483068f = [in_3p, in_2p];",
        "Field out_14708453066373483068f = out_23p;",
        "Table in_14708453066373483068f => out_14708453066373483068f {",
        "  'b'00 => 'b'1;",
        "  'b'01 => 'b'1;",
        "  'b'10 => 'b'0;",
        "  'b'11 => 'b'1;",
        "}",
        "",
    ];

    assert_eq!(wincupl.len(), wincupl_res.len());
    for line in 0..wincupl.len() {
        assert_eq!(wincupl[line], wincupl_res[line]);
    }

    let config = CircuitConfig::new(
        5892,
        24,
        vec![
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        ],
        vec![
            (14, 8),
            (15, 10),
            (16, 12),
            (17, 14),
            (18, 16),
            (19, 16),
            (20, 14),
            (21, 12),
            (22, 10),
            (23, 8),
        ],
        vec![(13, 42)],
    );

    let easy_gal_jedec = vec![
        "\x02",
        "Created by EasyGal-Translator v1.0",
        "*QP24",
        "*QF5892",
        "*G0",
        "*F0",
        "*L00032 00000000000011111111111111111111",
        "*L00064 11111111111111111111111111111011",
        "*L00096 10111111111111111111111111111111",
        "*L00128 11111111011110111111111111111111",
        "*L00160 11111111111111111111011101111111",
        "*L00192 11111111111111111111111111110000",
        "*L02144 00000000000011111111111111111111",
        "*L02176 11111111111111111111111111111111",
        "*L02208 11111111111111111111111111111111",
        "*L02240 01101111111111111111111111111111",
        "*L02272 11111111111110010000000000000000",
        "*L02880 00000000000000000000000011111111",
        "*L02912 11111111111111111111111111111111",
        "*L02944 11111111111111111111111111111111",
        "*L02976 11111111111101101111111111111111",
        "*L03008 11111111111111111111111110011111",
        "*L03040 11111111111111111111111111111111",
        "*L03072 11110101000000000000000000000000",
        "*L03648 00001111111111111111111111111111",
        "*L03680 11111111111111111111111111111111",
        "*L03712 11111111111111111111111101010000",
        "*L05792 00000000000000001000000011111100",
        "*C4641",
        "\x030000",
    ]
    .join("\n");

    let jedec = to_jedec(
        &table_data,
        &config,
        Some("Created by EasyGal-Translator v1.0".to_string()),
    )
    .unwrap();
    assert_eq!(jedec, easy_gal_jedec);
}
